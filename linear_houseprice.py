# -*- coding: utf-8 -*-
"""Linear HousePrice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16wvhwe59E1DDmAKYZV1PrsAcNMSJaYMZ
"""

# Commented out IPython magic to ensure Python compatibility.
#property excersise
import numpy as np
import pandas as pd

# import visuvalization
import matplotlib.pyplot as plt
import seaborn as sb
# %matplotlib inline

#import linear
from sklearn.linear_model import LinearRegression

#import train test
from sklearn.model_selection import train_test_split

#import metrics
from sklearn.metrics import r2_score, accuracy_score
from sklearn import metrics
from scipy import stats

pro= pd.read_csv("houseprice.csv")
pro.shape

pro.head()

pro.isnull().sum()

sb.heatmap(pro.corr(), linewidth=1)

pro.corr()

sb.pairplot(pro)

pro1= pro.loc[:,('price','bedrooms','bathrooms','sqft_living','grade','condition','sqft_above','sqft_lot','sqft_living15','waterfront','view')]

pro1

sb.pairplot(pro1)

#sb.distplot(pro1.price)
print("Range of Skewness, S < |1.96|")

print("Skewness of sqft: ",stats.skew(pro1.sqft_living))
print("Skewness of bed: ",stats.skew(pro1.bedrooms))
print("Skewness of bath: ",stats.skew(pro1.bathrooms))
print("Skewness of grade: ",stats.skew(pro1.grade))
print("Skewness of sqft_living15: ",stats.skew(pro1.sqft_living15))

print("Kurtosis of sqft: ",stats.kurtosis(pro1.sqft_living))
print("Kurtosis of bed: ",stats.kurtosis(pro1.bedrooms))

X=pro1.loc[:,('bedrooms','sqft_living','grade','condition','sqft_above','sqft_lot','sqft_living15','waterfront')]
y=pro1.price

X.shape

y.shape

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.20,random_state=14)

print("X_train shape", X_train.shape)
print("X_test shape", X_test.shape)
print("y_train shape", y_train.shape)
print("y_test shape", y_test.shape)

model_lr= LinearRegression()

model_lr.fit(X_train,y_train)

y_predict= model_lr.predict(X_test)

r2_score(y_test,y_predict)

y_predict

y_test

predictions = model_lr.predict(X_test)

plt.scatter(y_test, predictions)

print('MAE:', metrics.mean_absolute_error(y_test, predictions))
print('MSE:', metrics.mean_squared_error(y_test, predictions))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))

pro.bedrooms.plot(kind='box')

pro.sqft_living.plot(kind='box')





























